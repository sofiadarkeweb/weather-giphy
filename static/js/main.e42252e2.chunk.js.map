{"version":3,"sources":["components/utils.js","components/Giphy.jsx","components/Button.jsx","components/Header.jsx","components/Weather.jsx","App.js","index.js"],"names":["require","config","Giphy","description","useState","gif","setGif","getData","url","a","fetch","then","response","json","data","newGif","Math","floor","random","images","original","useEffect","weather","searchTerm","console","log","concat","weatherToUrl","className","src","alt","refreshPage","window","location","reload","Button","props","id","onClick","title","Header","thisYear","Date","getFullYear","thisDay","getDate","thisMonth","getMonth","thisHours","getHours","thisMinute","getMinutes","minutes","hours","month","Weather","temperature","setTemperature","feelsLike","setFeelsLike","setDescription","textDescription","setTextDescription","requestURL","process","res","catch","error","newTemperature","main","temp","newFeelsLike","feels_like","newDescription","newTextDescription","round","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e42252e2.chunk.js","sourcesContent":["require(\"dotenv\").config();\n\nconst weatherToUrl = (weather) => {\n\tlet searchTerm;\n\tconst baseUrl = \"https://api.giphy.com/v1/gifs/\";\n\tconst search = \"search?q=\";\n\tconst apiKey = \"oj7y67dGoJOLsovSxaoWbyLH3oLftshR\";\n\tconst limit = \"20\";\n\n\tif (weather === \"Clear\") {\n\t\tsearchTerm = \"sunny\";\n\t} else {\n\t\tsearchTerm = weather;\n\t}\n\n\tconsole.log(weather);\n\n\tconst requestURLspecific = baseUrl.concat(\n\t\tsearch,\n\t\tsearchTerm,\n\t\t\"&limit=\",\n\t\tlimit,\n\t\t\"&api_key=\",\n\t\tapiKey\n\t);\n\n\treturn requestURLspecific;\n};\n\nexport { weatherToUrl };\n","import React, { useState, useEffect } from \"react\";\nimport { weatherToUrl } from \"./utils\";\n\n// const cloudy\n\nfunction Giphy({ description }) {\n\tlet [gif, setGif] = useState(\"\");\n\n\tconst getData = async (url) => {\n\t\tif (description) {\n\t\t\tconst data = await fetch(url).then((response) => response.json());\n\t\t\tlet newGif =\n\t\t\t\tdata.data[Math.floor(Math.random() * 20)].images.original.url;\n\t\t\tsetGif(newGif);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tgetData(weatherToUrl(description));\n\t}, [description]);\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"gif-wrapper\">\n\t\t\t\t<img className=\"generated-gif\" src={gif} alt=\"gif\" />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Giphy;\n","import React from \"react\";\n\nfunction refreshPage() {\n\twindow.location.reload(false);\n}\n\nconst Button = (props) => {\n\treturn (\n\t\t<div>\n\t\t\t<button className=\"refresh-btn\" id=\"rotate\" onClick={refreshPage}>\n\t\t\t\t{props.title}\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default Button;\n","import React from \"react\";\n\nconst Header = () => {\n\tlet thisYear = new Date().getFullYear();\n\tlet thisDay = new Date().getDate();\n\tlet thisMonth = new Date().getMonth();\n\tlet thisHours = new Date().getHours();\n\tlet thisMinute = new Date().getMinutes();\n\n\tlet minutes = thisMinute < 10 ? \"0\" + thisMinute : thisMinute;\n\tlet hours = thisHours < 10 ? \"0\" + thisHours : thisHours;\n\tlet month = thisMonth + 1;\n\n\treturn (\n\t\t<header>\n\t\t\t<p className=\"top\">\n\t\t\t\tStockholm, Sweden {hours}:{minutes} {thisDay}/{month}/{thisYear}\n\t\t\t</p>\n\t\t</header>\n\t);\n};\n\nexport default Header;\n","import React, { useState, useEffect } from \"react\";\nimport Giphy from \"./Giphy\";\nimport Button from \"./Button\";\nimport Header from \"./Header\";\nrequire(\"dotenv\").config();\n\n// import dotenv from \"dotenv\";\n// dotenv.config();\n// console.log(process.env);\n\nconst key = process.env.REACT_APP_API_KEY;\n\nfunction Weather(props) {\n\tlet [temperature, setTemperature] = useState(\"\");\n\tlet [feelsLike, setFeelsLike] = useState(\"\");\n\tlet [description, setDescription] = useState(\"\");\n\tlet [textDescription, setTextDescription] = useState(\"\");\n\n\tconst url = \"https://api.openweathermap.org/data/2.5/weather\";\n\tconst city = \"stockholm\";\n\tconst unit = \"metric\";\n\tconst requestURL = url.concat(\"?q=\", city, \"&appid=\", key, \"&units=\", unit);\n\n\tuseEffect(() => {\n\t\tgetData();\n\t}, []);\n\n\tconst getData = async () => {\n\t\tconst data = await fetch(requestURL)\n\t\t\t.then((res) => res.json())\n\t\t\t.catch((error) => {\n\t\t\t\tsetTemperature(\"Big problem happened, Sorry :(\");\n\t\t\t});\n\n\t\tlet newTemperature = data.main.temp;\n\t\tlet newFeelsLike = data.main.feels_like;\n\t\tlet newDescription = data.weather[0].main;\n\t\tlet newTextDescription = data.weather[0].description;\n\n\t\tsetTemperature(newTemperature);\n\t\tsetFeelsLike(newFeelsLike);\n\t\tsetDescription(newDescription);\n\t\tsetTextDescription(newTextDescription);\n\t};\n\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<Header />\n\t\t\t<h1 className=\"weather-heading\">It's {textDescription}!</h1>\n\t\t\t<Button title=\"New GIF\" />\n\t\t\t<Giphy description={description} />\n\t\t\t<p className=\"temp-text\">\n\t\t\t\tToday the temperature in Stockholm is {Math.round(temperature)}°C, but\n\t\t\t\tit feels more like {Math.round(feelsLike)}°C.\n\t\t\t</p>\n\t\t</div>\n\t);\n}\n\nexport default Weather;\n","import \"./App.css\";\nimport Weather from \"./components/Weather\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Weather />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}